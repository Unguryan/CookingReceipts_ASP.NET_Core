{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\repos\\\\CookingReceipts\\\\WebUI_Angular\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class OwnerAdminGuard {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n\n  canActivate() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = localStorage.getItem('token');\n\n      if (token == null || token == \"\") {\n        _this.router.navigate(['login']);\n\n        return false;\n      }\n\n      var tokenData = {\n        Token: token,\n        UserName: \"\"\n      };\n      const data = JSON.stringify(tokenData);\n      var url = environment.idsAPI + '/User/GetUserRoles';\n\n      var res = _this.http.post(url, data, {\n        responseType: 'text',\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Accept': '*/*'\n        })\n      }).toPromise();\n\n      const roles = (yield res).toLowerCase();\n      return roles.includes(\"owner\") || roles.includes(\"admin\");\n    })();\n  }\n\n}\n\nOwnerAdminGuard.ɵfac = function OwnerAdminGuard_Factory(t) {\n  return new (t || OwnerAdminGuard)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nOwnerAdminGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OwnerAdminGuard,\n  factory: OwnerAdminGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:/repos/CookingReceipts/WebUI_Angular/ClientApp/src/app/guards/owner-admin-guard.guard.ts"],"names":["HttpHeaders","environment","i0","i1","i2","OwnerAdminGuard","constructor","http","router","canActivate","token","localStorage","getItem","navigate","tokenData","Token","UserName","data","JSON","stringify","url","idsAPI","res","post","responseType","headers","toPromise","roles","toLowerCase","includes","ɵfac","OwnerAdminGuard_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACKC,EAAAA,WAAW,GAAG;AAAA;;AAAA;AAChB,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAIF,KAAK,IAAI,IAAT,IAAiBA,KAAK,IAAI,EAA9B,EAAkC;AAC9B,QAAA,KAAI,CAACF,MAAL,CAAYK,QAAZ,CAAqB,CAAC,OAAD,CAArB;;AACA,eAAO,KAAP;AACH;;AACD,UAAIC,SAAS,GAAG;AACZC,QAAAA,KAAK,EAAEL,KADK;AAEZM,QAAAA,QAAQ,EAAE;AAFE,OAAhB;AAIA,YAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeL,SAAf,CAAb;AACA,UAAIM,GAAG,GAAGnB,WAAW,CAACoB,MAAZ,GAAqB,oBAA/B;;AACA,UAAIC,GAAG,GAAG,KAAI,CAACf,IAAL,CAAUgB,IAAV,CAAeH,GAAf,EAAoBH,IAApB,EAA0B;AAChCO,QAAAA,YAAY,EAAE,MADkB;AAEhCC,QAAAA,OAAO,EAAE,IAAIzB,WAAJ,CAAgB;AACrB,0BAAgB,kBADK;AAErB,oBAAU;AAFW,SAAhB;AAFuB,OAA1B,EAMP0B,SANO,EAAV;;AAOA,YAAMC,KAAK,GAAG,OAAOL,GAAP,EAAYM,WAAZ,EAAd;AACA,aAAOD,KAAK,CAACE,QAAN,CAAe,OAAf,KAA2BF,KAAK,CAACE,QAAN,CAAe,OAAf,CAAlC;AApBgB;AAqBnB;;AA1BwB;;AA4B7BxB,eAAe,CAACyB,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAI3B,eAAV,EAA2BH,EAAE,CAAC+B,QAAH,CAAY9B,EAAE,CAAC+B,UAAf,CAA3B,EAAuDhC,EAAE,CAAC+B,QAAH,CAAY7B,EAAE,CAAC+B,MAAf,CAAvD,CAAP;AAAwF,CAArJ;;AACA9B,eAAe,CAAC+B,KAAhB,GAAwB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAE3B,EAAAA,KAAK,EAAEL,eAAT;AAA0BiC,EAAAA,OAAO,EAAEjC,eAAe,CAACyB,IAAnD;AAAyDS,EAAAA,UAAU,EAAE;AAArE,CAAtB,CAAtC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class OwnerAdminGuard {\r\n    constructor(http, router) {\r\n        this.http = http;\r\n        this.router = router;\r\n    }\r\n    async canActivate() {\r\n        const token = localStorage.getItem('token');\r\n        if (token == null || token == \"\") {\r\n            this.router.navigate(['login']);\r\n            return false;\r\n        }\r\n        var tokenData = {\r\n            Token: token,\r\n            UserName: \"\"\r\n        };\r\n        const data = JSON.stringify(tokenData);\r\n        var url = environment.idsAPI + '/User/GetUserRoles';\r\n        var res = this.http.post(url, data, {\r\n            responseType: 'text',\r\n            headers: new HttpHeaders({\r\n                'Content-Type': 'application/json',\r\n                'Accept': '*/*',\r\n            }),\r\n        }).toPromise();\r\n        const roles = (await res).toLowerCase();\r\n        return roles.includes(\"owner\") || roles.includes(\"admin\");\r\n    }\r\n}\r\nOwnerAdminGuard.ɵfac = function OwnerAdminGuard_Factory(t) { return new (t || OwnerAdminGuard)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\r\nOwnerAdminGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OwnerAdminGuard, factory: OwnerAdminGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}